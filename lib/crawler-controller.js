// Generated by CoffeeScript 1.9.1
(function() {
  var Url, req, urlHandler;

  req = require('request');

  urlHandler = require('url');

  Url = (function() {
    function Url(baseUrl1) {
      this.baseUrl = baseUrl1;
      this.protocol = this.getCurProtocol(this.baseUrl);
    }

    Url.prototype.getCurProtocol = function(baseUrl) {
      if (baseUrl.substr(0, 7) === 'http://') {
        return 'http';
      } else {
        return 'https';
      }
    };

    return Url;

  })();

  RegExp.escape = function(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };

  exports.Url = Url;

  exports.crawl = function(seedSite, cb) {
    return req(seedSite.baseUrl, function(err, res, body) {
      var curUrl, curVal, hashBaseUrlRegex, normalizedUrl, re, urls;
      if (err) {
        return cb(err);
      }
      re = /<a[^>]*href="([^"]*)"[^>]*>/g;
      urls = [];
      while ((curVal = re.exec(body)) != null) {
        curUrl = curVal[1];
        normalizedUrl = urlHandler.resolve(seedSite.baseUrl, curUrl);
        hashBaseUrlRegex = new RegExp(RegExp.escape(seedSite.baseUrl + "#[^/]*$"));
        if (!hashBaseUrlRegex.test(normalizedUrl) && curUrl.substr(0, 7) !== 'mailto:' && curUrl.substr(0, 11) !== 'javascript:') {
          urls.push(normalizedUrl);
        }
      }
      return cb(null, urls);
    });
  };

}).call(this);

//# sourceMappingURL=crawler-controller.js.map
