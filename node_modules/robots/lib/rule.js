/*!
 * Robots
 * Copyright(c) 2011 Eugene Kalinin
 * MIT Licensed
 */

var ut = require('./utils');

exports.Rule = Rule;

/**
 * A rule line is a single
 *  - "Allow:" (allowance==True) or
 *  - "Disallow:" (allowance==False)
 * followed by a path.
 *
 * @constructor
 * @param {String}  path        URL-string
 * @param {Boolean} allowance   Is path allowed
 */
function Rule (path, allowance) {

  this.path = ut.quote(ut.unquote(path));
  this.allowance = allowance;

  // an empty value means allow all
  if( path === '' && !allowance) {
    this.allowance = true;
  }
}

var end_char = ut.quote('$');
/**
 * Check if this rule applies to the specified url
 *
 * @param {String} url
 * @return {Boolean}
 */
Rule.prototype.appliesTo = function(url) {
  if(!ut.is_path_safe(url)) {
    return false;
  }
  var url = ut.quote(ut.unquote(url));
  ut.d(' * Rule.appliesTo, url: '+url+', path: '+this.path);

  if (this.path === '*' || url === this.path) {
    return true;
  }
  // if the path is a directory then it applies
  else if (this.path.indexOf(url) === 0 && this.path[this.path.length - 1] === '/') {
    return true;
  }
  else if (this.path.indexOf('*') === -1) {
    return false;
  }
  else {
    var escapedPath = this.path.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&");
    var pathAsRegEx = new RegExp('^' + escapedPath.replace(/\*/g, '.+') + '$');

    if (pathAsRegEx.test(url)) {
      return true;
    }

    return false;
  }
};

Rule.prototype.toString = function() {
  return (this.allowance ? 'Allow' : 'Disallow') + ": " + this.path
};
